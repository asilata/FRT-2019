# -*- coding: utf-8 -*-
"""orbit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E78jIQvbI2K2ZDGDqG3LbJtE4XLD7ymG
"""

#code is written for q>0. for q<0, we have to change what s2 and t2 do to None

import matplotlib.pyplot as plt

q = input('Enter the value of q: ') # Value of the deformation parameter
t = 'q = '+str(q)
z0 = 1 # Compute orbit of this point
N = 100000 # Apply up to N combinations of s1 and t2
pointsDict = {} # Initially empty dictionary that will hold the values of the computations.
pointsDict[0] = z0 
a = {}

def s1(z):
    """Computes the action of the q-matrix $\sigma_1$. Returns None if the output is the point at infinity."""
    if z is None:
        return 1
    elif q+z == 0:
        return None
    else:
        return z/float(q+z)
      
def t1(z):
    """Computes the action of the q-matrix $\sigma_1^{-1}$. Returns None if the output is the point at infinity."""
    if z is None:
        return -q
    elif 1-z == 0:
        return None
    else:
        return float(q*z)/float(1-z)
      
def s2(z):
    """Computes the action of the q-matrix $\sigma_2. Returns None if the output is the point at infinity."""
    if z is None:
        return None
    else:
        return 1 + z/q

def t2(z):
    """Computes the action of the q-matrix $\sigma_2^{-1}. Returns None if the output is the point at infinity."""
    if z is None:
        return None
    else:
        return q*float(z-1)
    

def constructPoints():
    """Populate pointsDict with (a,v) where v is the a'th computed point in the orbit. The structure is a tree where the top node has four children, the values of s1(z0), t1(z0), s2(z0) and t2(z0) while the rest have 3 each. The list 'a' records the parent of each node. While branching out we ensure that we don't undo the earlier action. We have used the code 191=s1, 192=s2, 201=t1, 202=t2 """
    pointsDict[1] = s1(z0)
    pointsDict[2] = t1(z0)
    pointsDict[3] = s2(z0)
    pointsDict[4] = t2(z0)
    a[1] = 191
    a[2] = 201
    a[3] = 192
    a[4] = 202
    c = 5
    while c < N:
        z = pointsDict[(c-2)// 3]
        if a[(c-2)// 3] == 191:
            if c % 4 == 0:
                pointsDict[c] =s1(z)
                a[c] = 191
            elif c % 4 == 1:
                pointsDict[c] = s2(z)
                a[c] = 192
            else:
                pointsDict[c] = t2(z)
                a[c] = 202
        elif a[(c-2)// 3] == 201:
            if c % 4 == 0:
                pointsDict[c] =t1(z)
                a[c] = 201
            elif c % 4 == 1:
                pointsDict[c] = s2(z)
                a[c] = 192
            else:
                pointsDict[c] = t2(z)
                a[c] = 202
        elif a[(c-2)// 3] == 192:
            if c % 4 == 0:
                pointsDict[c] =s1(z)
                a[c] = 191
            elif c % 4 == 1:
                pointsDict[c] = t1(z)
                a[c] = 201
            else:
                pointsDict[c] = s2(z)
                a[c] = 192
        else:
            if c % 4 == 0:
                pointsDict[c] =s1(z)
                a[c] = 191
            elif c % 4 == 1:
                pointsDict[c] = t1(z)
                a[c] = 201
            else:
                pointsDict[c] = t2(z)
                a[c] = 202
        c = c+1

# Run everything: populate the points, and then plot the values.        
constructPoints()
vs = pointsDict.values()
ks = [0 for x in vs]
plt.figure(num = t)
plt.plot(vs,ks, 'm.')

plt.plot([z0, s1(z0), s1(s1(z0)), s1(s1(s1(z0)))], [0,0,0,0], 'go')
plt.plot([-q, 1/(-1/q-1/(q*q)), 1/(-1/q-1/(q*q)-1/(q*q*q)), 1/(-1/q-1/(q*q)-1/(q*q*q)-1/(q*q*q*q))], [0,0,0,0], 'ro')
plt.plot([-q, -q-q*q, -q-q*q-q*q*q, -q-q*q-q*q*q-q*q*q*q], [0,0,0,0], 'yo')
plt.plot([1+1/q, 1+1/q+1/(q**2), 1+1/q+1/(q*q)+1/(q*q*q)], [0,0,0], 'bo')
plt.plot([-(q+q**(2))-1/(q**(-3)+q**(-4)+q**(-5))],[0], color='brown', marker='o')
plt.plot([-(q+q**(2))-q**3],[0], color='brown', marker='o')
plt.plot([q/float(q-1)], [0], color= 'black', marker = 'o')
plt.plot( [-q**5-q**3-q**2-q, -q**4-q**3-q**2-q, -q**4-q**2-q, -q**3-q**2-q, -q**3-q, -q**2-q, -q**2, -q] ,[0,0,0,0,0,0,0,0], color='magenta', marker = 'x')
plt.plot( [q**(-3)+q**(-4), 1/q, 1, 1+q**(-2), 1+1/q, 1+1/q+q**(-2)], [0,0,0,0,0,0], color='orange', marker='x')
#if q != 1:
    #plt.plot([q/float(1-q)],0,'bo')
plt.axis([-N.bit_length(), N.bit_length(), -0.1, 0.1])
plt.show(block=False)

